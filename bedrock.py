"""Wrapper around Bedrock AI APIs."""
from typing import Dict, List, Optional

from pydantic import BaseModel, Extra, root_validator

from langchain.llms.base import LLM
from langchain.utils import get_from_dict_or_env


class BedrockProviderConfiguration(BaseModel):
    max_tokens: Optional[int] = None
    temperature: Optional[float] = None


class BedrockLLM(LLM, BaseModel):
    """Wrapper around Bedrock AI large language models.

    To use, you should have the ``bedrock_api_key`` environment variable set.

    Example:
        .. code-block:: python

            from langchain.llms import BedrockLLM
            bedrock = BedrockLLM(model="luminous-base")
    """

    client: Any  #: :meta private:
    model: str = "luminous-base"
    """Model name to use."""

    bedrock_api_key: Optional[str] = None
    config: Optional[BedrockProviderConfiguration] = None

    class Config:
        """Configuration for this pydantic object."""

        extra = Extra.forbid

    @root_validator()
    def validate_environment(cls, values: Dict) -> Dict:
        """Validate that api key and python package exists in environment."""
        bedrock_api_key = get_from_dict_or_env(
            values, "bedrock_api_key", "BEDROCK_API_KEY"
        )
        try:
            import bedrock

            values["client"] = bedrock.Client(api_key=bedrock_api_key)
        except ImportError:
            raise ValueError(
                "Could not import bedrock python package. "
                "Please it install it with `pip install bedrock`."
            )
        return values

    @property
    def _identifying_params(self) -> Dict[str, Any]:
        """Get the identifying parameters."""
        return {"model": self.model}

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "bedrock"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        """Call out to Bedrock's generate endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                bedrock = BedrockLLM(model="luminous-base")
                bedrock("Tell me a joke.")
        """
        response = self.client.generate(
            model=self.model,
            prompt=prompt,
            max_tokens=self.config.max_tokens if self.config else 250,
            temperature=self.config.temperature if self.config else 0.8,
            stop_sequences=stop,
        )
        return response.generations[0].text